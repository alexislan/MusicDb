// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicLike.Services;

#nullable disable

namespace MusicLike.Migrations
{
    [DbContext(typeof(MusicDbContext))]
    [Migration("20231110120756_initdb")]
    partial class initdb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MusicLike.Models.Artists.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("GenderId");

                    b.ToTable("Artists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            FullName = "John Doe",
                            GenderId = 1
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 2,
                            FullName = "Jane Smith",
                            GenderId = 2
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 3,
                            FullName = "Alice Johnson",
                            GenderId = 1
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 1,
                            FullName = "Bob Brown",
                            GenderId = 2
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 2,
                            FullName = "Charlie Davis",
                            GenderId = 1
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 3,
                            FullName = "Eva Wilson",
                            GenderId = 2
                        },
                        new
                        {
                            Id = 7,
                            CountryId = 1,
                            FullName = "Samuel Miller",
                            GenderId = 1
                        },
                        new
                        {
                            Id = 8,
                            CountryId = 2,
                            FullName = "Olivia Taylor",
                            GenderId = 2
                        },
                        new
                        {
                            Id = 9,
                            CountryId = 3,
                            FullName = "Maxwell Anderson",
                            GenderId = 1
                        },
                        new
                        {
                            Id = 10,
                            CountryId = 1,
                            FullName = "Sophia White",
                            GenderId = 2
                        });
                });

            modelBuilder.Entity("MusicLike.Models.Country.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Estados Unidos"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Canadá"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Reino Unido"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Francia"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Alemania"
                        },
                        new
                        {
                            Id = 6,
                            Name = "España"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Italia"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Argentina"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Brasil"
                        },
                        new
                        {
                            Id = 10,
                            Name = "México"
                        });
                });

            modelBuilder.Entity("MusicLike.Models.Gender.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Gender");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Female"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Male"
                        });
                });

            modelBuilder.Entity("MusicLike.Models.Genres.Genres", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Rock"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Pop"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Hip-Hop"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Country"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Electronic"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Jazz"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Classical"
                        },
                        new
                        {
                            Id = 8,
                            Name = "R&B"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Reggae"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Metal"
                        });
                });

            modelBuilder.Entity("MusicLike.Models.Rating.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Ratting")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Rating");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ratting = 1
                        },
                        new
                        {
                            Id = 2,
                            Ratting = 2
                        },
                        new
                        {
                            Id = 3,
                            Ratting = 3
                        },
                        new
                        {
                            Id = 4,
                            Ratting = 4
                        },
                        new
                        {
                            Id = 5,
                            Ratting = 5
                        });
                });

            modelBuilder.Entity("MusicLike.Models.ReleaseType.ReleaseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ReleaseType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Live"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Studio"
                        });
                });

            modelBuilder.Entity("MusicLike.Models.Releases.Releases", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReleaseTypeId")
                        .HasColumnType("int");

                    b.Property<string>("UrlImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("GenreId");

                    b.HasIndex("ReleaseTypeId");

                    b.ToTable("Releases");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArtistId = 1,
                            Description = "Explora un mundo de sonidos etéreos y melodías que te transportarán a paisajes oníricos.",
                            GenreId = 1,
                            Name = "Pescado Rabioso",
                            ReleaseDate = new DateTime(1973, 10, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReleaseTypeId = 1,
                            UrlImage = "https://i.scdn.co/image/ab67616d0000b27350db5a166ea23d5d6c4cd387"
                        },
                        new
                        {
                            Id = 2,
                            ArtistId = 1,
                            Description = "Explora un mundo de sonidos etéreos y melodías que te transportarán a paisajes oníricos.",
                            GenreId = 1,
                            Name = "Album One",
                            ReleaseDate = new DateTime(2022, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReleaseTypeId = 1,
                            UrlImage = "https://e.snmc.io/i/600/w/315b12fb229529b6eca8d59ce5548e62/6595402/fiona-apple-when-the-pawn-Cover-Art.jpg"
                        },
                        new
                        {
                            Id = 3,
                            ArtistId = 2,
                            Description = "Explora un mundo de sonidos etéreos y melodías que te transportarán a paisajes oníricos.",
                            GenreId = 2,
                            Name = "Greatest Hits",
                            ReleaseDate = new DateTime(2022, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReleaseTypeId = 2,
                            UrlImage = "https://e.snmc.io/i/600/w/81d2709f05fece1955b1a9460fb7a611/6558603/wu-tang-clan-enter-the-wu-tang-36-chambers-Cover-Art.jpg"
                        },
                        new
                        {
                            Id = 4,
                            ArtistId = 4,
                            Description = "Explora un mundo de sonidos etéreos y melodías que te transportarán a paisajes oníricos.",
                            GenreId = 4,
                            Name = "Epic Symphony",
                            ReleaseDate = new DateTime(2022, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReleaseTypeId = 1,
                            UrlImage = "https://e.snmc.io/i/600/w/600ed05da538856e6e3363351e09d2ea/11480922/dreamwell-in-my-saddest-dreams-i-am-beside-you-Cover-Art.jpg"
                        },
                        new
                        {
                            Id = 5,
                            ArtistId = 5,
                            Description = "Explora un mundo de sonidos etéreos y melodías que te transportarán a paisajes oníricos.",
                            GenreId = 5,
                            Name = "Jazz Reflections",
                            ReleaseDate = new DateTime(2022, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReleaseTypeId = 2,
                            UrlImage = "https://e.snmc.io/i/600/w/f1765ef46d3357f09691d50235f90a2e/5801416/burial-untrue-Cover-Art.jpg"
                        },
                        new
                        {
                            Id = 6,
                            ArtistId = 6,
                            Description = "Explora un mundo de sonidos etéreos y melodías que te transportarán a paisajes oníricos.",
                            GenreId = 6,
                            Name = "Rhythmic Beats",
                            ReleaseDate = new DateTime(2022, 7, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReleaseTypeId = 1,
                            UrlImage = "https://e.snmc.io/i/600/w/d5e6dc13402fb655ccfade4edfb8ffdd/11447491/the-beatles-now-and-then-Cover-Art.jpg"
                        },
                        new
                        {
                            Id = 7,
                            ArtistId = 7,
                            Description = "Explora un mundo de sonidos etéreos y melodías que te transportarán a paisajes oníricos.",
                            GenreId = 7,
                            Name = "Electric Dreams",
                            ReleaseDate = new DateTime(2022, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReleaseTypeId = 1,
                            UrlImage = "https://e.snmc.io/i/600/w/24c337b2e03f3e164e81f76349f749de/11299233/sampha-lahai-Cover-Art.jpg"
                        },
                        new
                        {
                            Id = 8,
                            ArtistId = 8,
                            Description = "Explora un mundo de sonidos etéreos y melodías que te transportarán a paisajes oníricos.",
                            GenreId = 8,
                            Name = "Soulful Serenade",
                            ReleaseDate = new DateTime(2022, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReleaseTypeId = 2,
                            UrlImage = "https://e.snmc.io/i/600/w/35e27de2a71fb6c6d549b2bfa44b26db/11378087/king-gizzard-and-the-lizard-wizard-the-silver-cord-Cover-Art.jpg"
                        },
                        new
                        {
                            Id = 9,
                            ArtistId = 9,
                            Description = "Explora un mundo de sonidos etéreos y melodías que te transportarán a paisajes oníricos.",
                            GenreId = 9,
                            Name = "Harmonic Fusion",
                            ReleaseDate = new DateTime(2022, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReleaseTypeId = 1,
                            UrlImage = "https://e.snmc.io/i/600/w/b3b909e2b34f516f0fafe47f374f5092/11357573/katie-dey-never-falter-hero-girl-Cover-Art.jpg"
                        },
                        new
                        {
                            Id = 10,
                            ArtistId = 10,
                            Description = "Explora un mundo de sonidos etéreos y melodías que te transportarán a paisajes oníricos.",
                            GenreId = 10,
                            Name = "Lyrical Journeys",
                            ReleaseDate = new DateTime(2022, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReleaseTypeId = 1,
                            UrlImage = "https://e.snmc.io/i/600/w/b86f77bdd57cc8ef80a33f908c0d154c/7017197/nirvana-mtv-unplugged-in-new-york-Cover-Art.jpg"
                        },
                        new
                        {
                            Id = 11,
                            ArtistId = 1,
                            Description = "Explora un mundo de sonidos etéreos y melodías que te transportarán a paisajes oníricos.",
                            GenreId = 10,
                            Name = "Funky Grooves",
                            ReleaseDate = new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReleaseTypeId = 2,
                            UrlImage = "https://e.snmc.io/i/600/w/6cf98641e1c9a01b80136c3a2bf9155d/8276371/tom-waits-bone-machine-Cover-Art.jpg"
                        },
                        new
                        {
                            Id = 12,
                            ArtistId = 2,
                            Description = "Explora un mundo de sonidos etéreos y melodías que te transportarán a paisajes oníricos.",
                            GenreId = 2,
                            Name = "Cinematic Soundscape",
                            ReleaseDate = new DateTime(2023, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReleaseTypeId = 2,
                            UrlImage = "https://e.snmc.io/i/600/w/4f148d18a53679fceb8fce7e1506d150/2109326/pulp-different-class-Cover-Art.jpg"
                        },
                        new
                        {
                            Id = 13,
                            ArtistId = 3,
                            Description = "Explora un mundo de sonidos etéreos y melodías que te transportarán a paisajes oníricos.",
                            GenreId = 3,
                            Name = "Ethereal Echoes",
                            ReleaseDate = new DateTime(2023, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReleaseTypeId = 1,
                            UrlImage = "https://e.snmc.io/i/600/w/bca2b066738e487fc4caeaeb5c9bb92d/11429205/reverend-kristin-michael-hayter-saved-Cover-Art.jpg"
                        },
                        new
                        {
                            Id = 14,
                            ArtistId = 4,
                            Description = "Explora un mundo de sonidos etéreos y melodías que te transportarán a paisajes oníricos.",
                            GenreId = 4,
                            Name = "Symphonic Resonance",
                            ReleaseDate = new DateTime(2023, 4, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReleaseTypeId = 2,
                            UrlImage = "https://e.snmc.io/i/600/w/4ab09302801f94f26587acc12e7811ed/11404652/mike-burning-desire-Cover-Art.png"
                        },
                        new
                        {
                            Id = 15,
                            ArtistId = 5,
                            Description = "Explora un mundo de sonidos etéreos y melodías que te transportarán a paisajes oníricos.",
                            GenreId = 1,
                            Name = "Acoustic Melodies",
                            ReleaseDate = new DateTime(2023, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReleaseTypeId = 1,
                            UrlImage = "https://e.snmc.io/i/600/w/03408244d0416498486a81e5b479fb9a/11229865/ana-frango-eletrico-me-chama-de-gato-que-eu-sou-sua-Cover-Art.jpg"
                        });
                });

            modelBuilder.Entity("MusicLike.Models.Review.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RatingId")
                        .HasColumnType("int");

                    b.Property<int>("ReleaseId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RatingId");

                    b.HasIndex("ReleaseId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RatingId = 5,
                            ReleaseId = 1,
                            Text = "A masterpiece! Loved every moment.",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            RatingId = 4,
                            ReleaseId = 2,
                            Text = "Great album, amazing beats.",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            RatingId = 3,
                            ReleaseId = 3,
                            Text = "Not my style, but impressive nonetheless.",
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            RatingId = 5,
                            ReleaseId = 4,
                            Text = "Classic vibes! Nostalgia at its best.",
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            RatingId = 4,
                            ReleaseId = 5,
                            Text = "Unexpectedly good. Worth a listen.",
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            RatingId = 3,
                            ReleaseId = 6,
                            Text = "Could be better, but not bad.",
                            UserId = 6
                        },
                        new
                        {
                            Id = 7,
                            RatingId = 5,
                            ReleaseId = 7,
                            Text = "Incredible vocals! A must-listen.",
                            UserId = 7
                        },
                        new
                        {
                            Id = 8,
                            RatingId = 4,
                            ReleaseId = 8,
                            Text = "Jazzy and smooth. Perfect for relaxation.",
                            UserId = 8
                        },
                        new
                        {
                            Id = 9,
                            RatingId = 3,
                            ReleaseId = 9,
                            Text = "Not my cup of tea, but I see the appeal.",
                            UserId = 9
                        },
                        new
                        {
                            Id = 10,
                            RatingId = 5,
                            ReleaseId = 10,
                            Text = "A musical journey! Loved every track.",
                            UserId = 10
                        },
                        new
                        {
                            Id = 11,
                            RatingId = 4,
                            ReleaseId = 11,
                            Text = "Energetic and catchy. Can't stop listening.",
                            UserId = 1
                        },
                        new
                        {
                            Id = 12,
                            RatingId = 3,
                            ReleaseId = 12,
                            Text = "Unique sound, but not my favorite.",
                            UserId = 2
                        },
                        new
                        {
                            Id = 13,
                            RatingId = 5,
                            ReleaseId = 13,
                            Text = "A sonic masterpiece! Brilliantly composed.",
                            UserId = 3
                        },
                        new
                        {
                            Id = 14,
                            RatingId = 4,
                            ReleaseId = 14,
                            Text = "Smooth and soulful. Great for late nights.",
                            UserId = 4
                        },
                        new
                        {
                            Id = 15,
                            RatingId = 3,
                            ReleaseId = 15,
                            Text = "Not my genre, but I appreciate the talent.",
                            UserId = 5
                        },
                        new
                        {
                            Id = 16,
                            RatingId = 5,
                            ReleaseId = 6,
                            Text = "Epic! Can't get enough of it.",
                            UserId = 6
                        },
                        new
                        {
                            Id = 17,
                            RatingId = 4,
                            ReleaseId = 7,
                            Text = "Captivating lyrics. Hits you in the feels.",
                            UserId = 7
                        },
                        new
                        {
                            Id = 18,
                            RatingId = 3,
                            ReleaseId = 8,
                            Text = "Decent. Has some good moments.",
                            UserId = 8
                        },
                        new
                        {
                            Id = 19,
                            RatingId = 5,
                            ReleaseId = 9,
                            Text = "Pure brilliance! A modern classic.",
                            UserId = 9
                        },
                        new
                        {
                            Id = 20,
                            RatingId = 4,
                            ReleaseId = 10,
                            Text = "Groovy and fun. Great for parties.",
                            UserId = 10
                        });
                });

            modelBuilder.Entity("MusicLike.Models.UserType.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("UserTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "User"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("MusicLike.Models.Users.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("GenderId");

                    b.HasIndex("UserTypeId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Email = "john.doe@example.com",
                            GenderId = 1,
                            Name = "John Doe",
                            Password = "password123",
                            UserName = "johndoe",
                            UserTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 2,
                            Email = "jane.smith@example.com",
                            GenderId = 2,
                            Name = "Jane Smith",
                            Password = "password456",
                            UserName = "janesmith",
                            UserTypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 3,
                            Email = "bob.johnson@example.com",
                            GenderId = 1,
                            Name = "Bob Johnson",
                            Password = "password789",
                            UserName = "bobjohnson",
                            UserTypeId = 1
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 4,
                            Email = "alice.brown@example.com",
                            GenderId = 2,
                            Name = "Alice Brown",
                            Password = "passwordABC",
                            UserName = "alicebrown",
                            UserTypeId = 1
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 5,
                            Email = "charlie.davis@example.com",
                            GenderId = 1,
                            Name = "Charlie Davis",
                            Password = "passwordDEF",
                            UserName = "charliedavis",
                            UserTypeId = 1
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 6,
                            Email = "eva.wilson@example.com",
                            GenderId = 2,
                            Name = "Eva Wilson",
                            Password = "passwordGHI",
                            UserName = "evawilson",
                            UserTypeId = 1
                        },
                        new
                        {
                            Id = 7,
                            CountryId = 7,
                            Email = "david.lee@example.com",
                            GenderId = 1,
                            Name = "David Lee",
                            Password = "passwordJKL",
                            UserName = "davidlee",
                            UserTypeId = 1
                        },
                        new
                        {
                            Id = 8,
                            CountryId = 8,
                            Email = "fiona.miller@example.com",
                            GenderId = 2,
                            Name = "Fiona Miller",
                            Password = "passwordMNO",
                            UserName = "fionamiller",
                            UserTypeId = 1
                        },
                        new
                        {
                            Id = 9,
                            CountryId = 9,
                            Email = "gary.turner@example.com",
                            GenderId = 1,
                            Name = "Gary Turner",
                            Password = "passwordPQR",
                            UserName = "garyturner",
                            UserTypeId = 1
                        },
                        new
                        {
                            Id = 10,
                            CountryId = 10,
                            Email = "heather.white@example.com",
                            GenderId = 2,
                            Name = "Heather White",
                            Password = "passwordSTU",
                            UserName = "heatherwhite",
                            UserTypeId = 1
                        });
                });

            modelBuilder.Entity("MusicLike.Models.Artists.Artist", b =>
                {
                    b.HasOne("MusicLike.Models.Country.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicLike.Models.Gender.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("MusicLike.Models.Releases.Releases", b =>
                {
                    b.HasOne("MusicLike.Models.Artists.Artist", "Artist")
                        .WithMany("Releases")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicLike.Models.Genres.Genres", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicLike.Models.ReleaseType.ReleaseType", "ReleaseType")
                        .WithMany()
                        .HasForeignKey("ReleaseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Genre");

                    b.Navigation("ReleaseType");
                });

            modelBuilder.Entity("MusicLike.Models.Review.Review", b =>
                {
                    b.HasOne("MusicLike.Models.Rating.Rating", "Rating")
                        .WithMany()
                        .HasForeignKey("RatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicLike.Models.Releases.Releases", "Release")
                        .WithMany()
                        .HasForeignKey("ReleaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MusicLike.Models.Users.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rating");

                    b.Navigation("Release");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MusicLike.Models.Users.Users", b =>
                {
                    b.HasOne("MusicLike.Models.Country.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicLike.Models.Gender.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicLike.Models.UserType.UserType", "UserType")
                        .WithMany()
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Gender");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("MusicLike.Models.Artists.Artist", b =>
                {
                    b.Navigation("Releases");
                });
#pragma warning restore 612, 618
        }
    }
}
